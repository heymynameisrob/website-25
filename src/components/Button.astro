---
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils";
import { Tooltip } from "@/components/primitives/Tooltip";

const buttonVariants = cva(
  "inline-flex items-center whitespace-nowrap border justify-center rounded-lg text-sm leading-4 transition-colors outline-none focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:opacity-50 disabled:pointer-events-none active:scale-[0.98]",
  {
    variants: {
      variant: {
        default: "bg-primary text-background shadow-sm hover:opacity-90",
        accent:
          "bg-accent text-white border border-accent shadow-sm hover:opacity-90",
        destructive: "bg-red-600 shadow-sm text-white hover:bg-destructive/90",
        secondary:
          "bg-background text-primary hover:bg-gray-2 shadow-sm dark:bg-gray-3 dark:hover:bg-gray-4",
        ghost: "border-transparent hover:bg-gray-4",
        link: "underline-offset-4 hover:underline text-accent",
      },
      size: {
        default: "h-10 py-2 px-4",
        sm: "h-8 px-3 rounded-lg xl:text-base",
        lg: "h-12 text-base rounded-xl px-8",
        icon: "w-8 h-8 rounded-md !p-px",
      },
    },
    defaultVariants: {
      variant: "secondary",
      size: "default",
    },
  },
);

export interface Props extends VariantProps<typeof buttonVariants> {
  href?: string;
  title?: string;
  class?: string;
  [key: string]: any;
}

const { href, title, variant, size, class: className, ...props } = Astro.props;
---

{
  href ? (
    title ? (
      <Tooltip content={title}>
        <a
          href={href}
          class={cn(buttonVariants({ variant, size, className }))}
          {...props}
        >
          <slot />
        </a>
      </Tooltip>
    ) : (
      <a
        href={href}
        class={cn(buttonVariants({ variant, size, className }))}
        {...props}
      >
        <slot />
      </a>
    )
  ) : (
    title ? (
      <Tooltip content={title}>
        <button
          type="button"
          class={cn(buttonVariants({ variant, size, className }))}
          {...props}
        >
          <slot />
        </button>
      </Tooltip>
    ) : (
      <button
        type="button"
        class={cn(buttonVariants({ variant, size, className }))}
        {...props}
      >
        <slot />
      </button>
    )
  )
}
